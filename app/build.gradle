apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        manifestPlaceholders = [
                CHANNEL_VALUE: "developer-default",
                APPLICATION_ID : applicationId,

                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "9c934e76986f8999080f05e5",
                JPUSH_CHANNEL : "developer-default",
                XIAOMI_APPID  : "MI-2882303761518926578",
                XIAOMI_APPKEY : "MI-5111892695578",
                OPPO_APPKEY   : "OP-3c0761001086459c97ef65ac4b4fd10d",
                OPPO_APPID    : "OP-30452309",
                OPPO_APPSECRET: "OP-a8e141fde59645138c11b9e4273a33a1",
                VIVO_APPKEY   : "vivo的APPKEY",
                VIVO_APPID    : "vivo的APPID",
                HUAWEI_APPID   : "103547525",
                HUAWEI_CPID    : "890086000102248603",
                AMAP_KEY      : "24baea6afd21d827d0cfaccbff1e57e7"

        ]

        signingConfigs {
            release {
                storeFile file(rootProject.getRootDir().getAbsolutePath() + "/managerKeyStore.jks")
                storePassword 'daqsoft'
                keyAlias 'daqsoft'
                keyPassword 'daqsoft'
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false  //压缩优化
            shrinkResources false  //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            zipAlignEnabled true  //压缩优化
            shrinkResources true  //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        beta.initWith(debug)
        beta {
            matchingFallbacks = ['beta', 'debug', 'release']
            minifyEnabled false
            zipAlignEnabled false  //压缩优化
            shrinkResources false  //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        preprod.initWith(debug)
        preprod {
            matchingFallbacks = ['preprod', 'debug', 'release']
            minifyEnabled true
            zipAlignEnabled true  //压缩优化
            shrinkResources true  //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding true
    }

    lintOptions {
        ignoreWarnings true
        checkReleaseBuilds false
        abortOnError false
    }


    // 自定义APK名称
    applicationVariants.all { variant ->
        variant.outputs.all { output ->

                def project = "XQZG"
                def separator = "_"
                def buildType = variant.buildType.name
                def versionName = variant.versionName
                def versionCode = variant.versionCode
                def date = new Date()
                def formattedDate = date.format('yyyyMMdd')
                def apkName = project + separator + "v" + versionName + separator + versionCode + separator + buildType + separator  + separator + formattedDate + ".apk"
                output.outputFileName = apkName

        }
    }
}

kapt {
    generateStubs = true
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // hilt
    implementation rootProject.ext.dependencies["hilt-android"]
    kapt rootProject.ext.dependencies["hilt-android-compiler"]
    implementation rootProject.ext.dependencies["hilt-lifecycle-viewmodel"]
    kapt rootProject.ext.dependencies["hilt-compiler"]

    //宿主项目中判断组件是否需要独立运行
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //主业务模块
        implementation project(':module-main')
        //首页模块
        implementation project(':module-home')
        //任务模块
        implementation project(':module-task')
        //项目模块
        implementation project(':module-project')
        //工作台模块
        implementation project(':module-workbench')
        //个人中心模块
        implementation project(':module-mine')
        //webView模块
        implementation project(':module-webview')

    }
}
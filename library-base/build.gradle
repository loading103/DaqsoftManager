apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'


android {

    // 开发接口地址
    def BETA_BASE_API_URL = "\"http://10.252.247.1:8080/\""
    // 测试接口地址
    def DEBUG_BASE_API_URL = "\"http://10.252.252.119:8080/\""
    // 预生产接口地址
    def PREPROD_BASE_API_URL = "\"http://i.daqsoft.com/daqapi/\""
    // 正式接口地址
    def RELEASE_BASE_API_URL = "\"http://i.daqsoft.com/daqapi/\""



    // 开发接口地址(消息)
    def BETA_MESSAGE_API_URL = "\"http://10.252.247.1:8088/\""
    // 测试接口地址(消息)
    def DEBUG_MESSAGE_API_URL = "\"http://10.252.252.119:8088/\""
    // 预生产接口地址(消息)
    def PREPROD_MESSAGE_API_URL = "\"http://i.daqsoft.com/daqmessage/\""
    // 正式接口地址(消息)
    def RELEASE_MESSAGE_API_URL = "\"http://i.daqsoft.com/daqmessage/\""


    // H5开发地址(前后端分离)
    def BETA_HTML_SEPARATE_URL = "\"http://10.252.247.1:8888/\""
    // H5测试地址(前后端分离)
    def DEBUG_HTML_SEPARATE_URL = "\"http://10.252.252.119:888/\""
    // H5预生产地址(前后端分离)
    def PREPROD_HTML_SEPARATE_URL = "\"http://app.i.daqsoft.com/\""
    // H5正式地址(前后端分离)
    def RELEASE_HTML_SEPARATE_URL = "\"http://app.i.daqsoft.com/\""


    // H5开发地址(前后端未分离)
    def BETA_HTML_URL = "\"http://10.252.247.17:8888/\""
    // H5测试地址(前后端未分离)
    def DEBUG_HTML_URL = "\"http://10.252.252.119/daqOa/\""
    // H5预生产山地址(前后端未分离)
    def PREPROD_HTML_URL = "\"http://i.daqsoft.com/daqOa/\""
    // H5正式地址(前后端未分离)
    def RELEASE_HTML_URL = "\"http://i.daqsoft.com/daqOa/\""


    // 开发上传地址
    def BETA_OSS_URL = "\"http://10.252.252.119/ossUpload\""
    // 测试上传地址
    def DEBUG_OSS_URL = "\"http://10.252.252.119/ossUpload\""
    // 预生产上传地址
    def PREPROD_OSS_URL = "\"http://i.daqsoft.com/ossUpload\""
    // 正式上传地址
    def RELEASE_OSS_URL = "\"http://i.daqsoft.com/ossUpload\""


    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_API_URL", "${DEBUG_BASE_API_URL}")
            buildConfigField("String", "MESSAGE_API_URL", "${DEBUG_MESSAGE_API_URL}")
            buildConfigField("String", "HTML_SEPARATE_URL", "${DEBUG_HTML_SEPARATE_URL}")
            buildConfigField("String", "HTML_URL", "${DEBUG_HTML_URL}")
            buildConfigField("String", "OSS_URL", "${DEBUG_OSS_URL}")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_API_URL", "${RELEASE_BASE_API_URL}")
            buildConfigField("String", "MESSAGE_API_URL", "${RELEASE_MESSAGE_API_URL}")
            buildConfigField("String", "HTML_SEPARATE_URL", "${RELEASE_HTML_SEPARATE_URL}")
            buildConfigField("String", "HTML_URL", "${RELEASE_HTML_URL}")
            buildConfigField("String", "OSS_URL", "${RELEASE_OSS_URL}")
        }

        beta.initWith(debug)
        beta {
            matchingFallbacks = ['beta', 'debug', 'release']
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_API_URL", "${BETA_BASE_API_URL}")
            buildConfigField("String", "MESSAGE_API_URL", "${BETA_MESSAGE_API_URL}")
            buildConfigField("String", "HTML_SEPARATE_URL", "${BETA_HTML_SEPARATE_URL}")
            buildConfigField("String", "HTML_URL", "${BETA_HTML_URL}")
            buildConfigField("String", "OSS_URL", "${BETA_OSS_URL}")
        }

        preprod.initWith(debug)
        preprod {
            matchingFallbacks = ['preprod', 'debug', 'release']
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_API_URL", "${PREPROD_BASE_API_URL}")
            buildConfigField("String", "MESSAGE_API_URL", "${PREPROD_MESSAGE_API_URL}")
            buildConfigField("String", "HTML_SEPARATE_URL", "${PREPROD_HTML_SEPARATE_URL}")
            buildConfigField("String", "HTML_URL", "${PREPROD_HTML_URL}")
            buildConfigField("String", "OSS_URL", "${PREPROD_OSS_URL}")
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding true
    }

    lintOptions {
        ignoreWarnings true
        checkReleaseBuilds false
        abortOnError false
    }
}


kapt {
    generateStubs = true
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'


    // 基础框架
    api project(':mvvmfoundation')

    // 极光
    api project(':jiguang')
    // oppo 厂商 aar 需要单独引入
    implementation(name: 'com.heytap.msp-push-2.1.0', ext: 'aar')
    //oppo_dependencies_end

    // permissionx
    api(rootProject.ext.dependencies.permissionx)

    //阿里路由框架
    api rootProject.ext.dependencies["arouter-api"]

    // immersionbar
    api rootProject.ext.dependencies.immersionbar

    // RWidgetHelper
    api rootProject.ext.dependencies.RWidgetHelper

    // paging3
    api rootProject.ext.dependencies["paging"]

    //  bindingcollectionadapter-paging
    api rootProject.ext.dependencies["bindingcollectionadapter"]
    api rootProject.ext.dependencies["bindingcollectionadapter-recyclerview"]
    api rootProject.ext.dependencies["bindingcollectionadapter-viewpager2"]
    api rootProject.ext.dependencies["bindingcollectionadapter-paging"]

    // datastore
    api rootProject.ext.dependencies["datastore-core"]
    api rootProject.ext.dependencies["datastore-preferences"]

    // bottom-tab
    api rootProject.ext.dependencies["bottom-tab"]

    // hilt
    api rootProject.ext.dependencies["hilt-android"]
    kapt rootProject.ext.dependencies["hilt-android-compiler"]
    api rootProject.ext.dependencies["hilt-lifecycle-viewmodel"]
    kapt rootProject.ext.dependencies["hilt-compiler"]

    // simplifyspan
    api rootProject.ext.dependencies.simplifyspan

    // Android-PickerView
    api rootProject.ext.dependencies["Android-PickerView"]

    //picture_library
    api project(':picture_library')

    // smart-refresh-layout
    api rootProject.ext.dependencies["smart-refresh-layout-kernel"]
    api rootProject.ext.dependencies["refresh-header-material"]

    // jsoup
    api rootProject.ext.dependencies.jsoup

    // room
    api rootProject.ext.dependencies["room-runtime"]
    kapt rootProject.ext.dependencies["room-compiler"]
    api rootProject.ext.dependencies["room-ktx"]

    // banner
    api rootProject.ext.dependencies["banner"]

    // MagicIndicator
    api rootProject.ext.dependencies.magicindicator

    // navigation
    api rootProject.ext.dependencies["navigation-fragment"]
    api rootProject.ext.dependencies["navigation-ui"]

    // XPopup
    api rootProject.ext.dependencies.XPopup

    // AndRatingBar
    api rootProject.ext.dependencies.AndRatingBar

    // agentweb
    api rootProject.ext.dependencies["agentweb"]
    api rootProject.ext.dependencies["agentweb-filechooser"]

    // richtext
    api rootProject.ext.dependencies["richtext"]
    api rootProject.ext.dependencies["richtext-html"]

    //wechat
    api rootProject.ext.dependencies["wechat"]

}

//huawei_plugin_start
//华为请按照厂商文档配置根 gradle 华为镜像依赖和添加 agconnect-services.json 后再打开此插件依赖
apply plugin: 'com.huawei.agconnect'
//huawei_plugin_end